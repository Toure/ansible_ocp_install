# ==============================================================================
# Makefile for Disconnected OpenShift Installation (Terraform + Ansible)
#
# Manages the full end-to-end workflow:
# 1. Ansible generates Ignition configs.
# 2. Terraform provisions EC2 nodes using those configs.
# 3. Ansible completes the OCP installation on the new nodes.
# ==============================================================================

# --- Configuration ---
# Use `:=` for immediate variable assignment.
PLAYBOOK        := playbook.yml
# NOTE: The inventory file is now GENERATED by Terraform.
INVENTORY       := inventory.ini
TF_DIR          := terraform
ROLES_DIR       := roles
GEN_DIR         := $(ROLES_DIR)/upi_installer/files/generated
ANSIBLE_LINT    := ansible-lint
COLLECTIONS     := kubernetes.core amazon.aws community.general community.hashi_vault

.DEFAULT_GOAL := help
.PHONY: all help deps test lint syntax-check ignition provision install clean destroy

## ------------------ Main Workflow Targets ------------------
all: ignition provision install ## Run the entire deployment workflow: ignition -> provision -> install.
	@echo ""
	@echo "✅ Full Deployment Workflow Complete!"
	@echo "   Your OpenShift cluster should be ready."

ignition: deps ## [Step 1] Run Ansible to generate Ignition configs.
	@echo "--> Generating Ignition configs with Ansible..."
	@mkdir -p $(GEN_DIR)
	@ansible-playbook $(PLAYBOOK) --tags generate_ignition
	@echo "   Ignition files created in $(GEN_DIR)/"

provision: ## [Step 2] Run Terraform to provision EC2 nodes and generate inventory.
	@echo "--> Provisioning infrastructure with Terraform..."
	@if [ ! -f "$(GEN_DIR)/bootstrap.ign" ]; then \
		echo "ERROR: Ignition files not found. Please run 'make ignition' first."; exit 1; \
	fi
	@cd $(TF_DIR) && terraform init -upgrade
	@cd $(TF_DIR) && terraform apply -auto-approve
	@echo "   Terraform provisioning complete. Inventory file '$(INVENTORY)' has been generated."

install: ## [Step 3] Run Ansible to complete the OpenShift installation.
	@echo "--> Completing OpenShift installation with Ansible..."
	@if [ ! -f "$(INVENTORY)" ]; then \
		echo "ERROR: Inventory file '$(INVENTORY)' not found. Please run 'make provision' first."; exit 1; \
	fi
	@ansible-playbook $(PLAYBOOK) -i $(INVENTORY) --tags complete_install

## ------------------ Testing & Utility Targets ------------------
help: ## Show this help message.
	@echo "Usage: make [target]"
	@echo ""
	@echo "Workflow Targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep '\[Step' | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'
	@echo ""
	@echo "Utility & Testing Targets:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | grep -v '\[Step' | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'


deps: ## Install all Python and Ansible dependencies.
	@echo "--> Installing Python requirements from requirements.txt..."
	@pip install -r requirements.txt
	@echo "--> Installing Ansible Galaxy collections..."
	@ansible-galaxy collection install $(COLLECTIONS)

test: lint syntax-check ## Run all static analysis tests.
	@echo "✅ Static analysis tests passed."

lint: ## Lint check for Ansible playbook and roles and Terraform code.
	@$(MAKE) lint-ansible
	@$(MAKE) lint-terraform

lint-ansible: ## Lint the Ansible playbook and roles for style and errors.
	@echo "--> Linting Ansible code..."
	@if ! command -v $(ANSIBLE_LINT) &> /dev/null; then \
		echo "WARNING: 'ansible-lint' not found. Skipping. Install with: pip install ansible-lint"; \
	else \
		$(ANSIBLE_LINT) $(PLAYBOOK) --roles-dir $(ROLES_DIR); \
	fi

syntax-check: ## Check the Ansible playbook for syntax errors.
	@echo "--> Checking Ansible playbook syntax..."
	@ansible-playbook $(PLAYBOOK) --syntax-check

lint-terraform: ## Lint the Terraform code for style and errors.
	@echo "--> Linting Terraform code..."
	@if ! command -v tflint &> /dev/null; then \
		echo "WARNING: 'tflint' not found. Skipping. Install from
	@cd $(TF_DIR) && terraform init -upgrade; \
		tflint --init; \
	else \
		cd $(TF_DIR) && tflint; \
	fi

## ------------------ Cleanup & Destruction Targets ------------------
clean: ## Remove all generated artifacts (ignition, inventory, terraform state).
	@echo "--> Cleaning up generated artifacts..."
	@rm -f $(INVENTORY)
	@rm -rf $(GEN_DIR)
	@rm -rf $(TF_DIR)/.terraform
	@rm -f $(TF_DIR)/.terraform.lock.hcl
	@rm -f $(TF_DIR)/terraform.tfstate*
	@echo "   Cleanup complete."

destroy: ## DANGER: Destroy all infrastructure managed by Terraform.
	@echo ""
	@echo "\033[0;31m!!! WARNING: THIS WILL PERMANENTLY DESTROY YOUR CLUSTER INFRASTRUCTURE !!!\033[0m"
	@read -p "Are you sure you want to continue? (y/N) " -r; \
	if [[ $$REPLY =~ ^[Yy]$$ ]]; then \
		echo "--> Destroying Terraform-managed infrastructure..."; \
		cd $(TF_DIR) && terraform destroy -auto-approve; \
	else \
		echo "   Destruction aborted."; \
	fi
